{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dataFactory-02"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datastorageaccountv2.dfs.core.windows.net/"
		},
		"HttpServer1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pgm.mobie.pt/integration/locations"
		},
		"HttpServer2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ionity.eu/location.json"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy ionite",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy ionite",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy pgm",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Ionity",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ionitydatalake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy pgm",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "pgm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "pgmdatalake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/datasets/Ionity')]",
				"[concat(variables('factoryId'), '/datasets/ionitydatalake')]",
				"[concat(variables('factoryId'), '/datasets/pgm')]",
				"[concat(variables('factoryId'), '/datasets/pgmdatalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ionity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"changed": {
							"type": "boolean"
						},
						"timestamp": {
							"type": "integer"
						},
						"clive": {
							"type": "integer"
						},
						"cbuilding": {
							"type": "integer"
						},
						"locations": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"title": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"adress": {
										"type": "string"
									},
									"plz": {
										"type": "string"
									},
									"city": {
										"type": "string"
									},
									"lat": {
										"type": "string"
									},
									"lng": {
										"type": "string"
									},
									"status": {
										"type": "string"
									},
									"charger": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/READfinalCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Final",
						"fileSystem": "datalake"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "lat",
						"type": "String"
					},
					{
						"name": "lng",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/finalCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Final",
						"fileSystem": "datalake"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "lat",
						"type": "String"
					},
					{
						"name": "lng",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "weekday",
						"type": "String"
					},
					{
						"name": "hour",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ionitydatalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Ionity",
						"fileSystem": "datalake"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pgm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"party_id": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"address": {
										"type": "string"
									},
									"city": {
										"type": "string"
									},
									"coordinates": {
										"type": "object",
										"properties": {
											"latitude": {
												"type": "string"
											},
											"longitude": {
												"type": "string"
											}
										}
									},
									"evses": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"evse_id": {
													"type": "string"
												},
												"status": {
													"type": "string"
												},
												"last_updated": {
													"type": "string"
												},
												"connectors": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"format": {
																"type": "string"
															},
															"standard": {
																"type": "string"
															},
															"max_voltage": {
																"type": "integer"
															},
															"last_updated": {
																"type": "string"
															},
															"max_amperage": {
																"type": "integer"
															},
															"max_electric_power": {
																"type": "integer"
															}
														}
													}
												}
											}
										}
									},
									"last_updated": {
										"type": "string"
									},
									"mobie_voltage_level": {
										"type": "string"
									}
								}
							}
						},
						"status_code": {
							"type": "integer"
						},
						"status_message": {
							"type": "string"
						},
						"timestamp": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pgmdatalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Pgm",
						"fileSystem": "datalake"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Api-Key": {
							"type": "SecureString",
							"value": "**********"
						},
						"Authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Flow",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-11-07T17:28:00",
						"timeZone": "GMT Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ionitydatalake",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "pgmdatalake",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "finalCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "union1"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          cbuilding as short,",
						"          changed as boolean,",
						"          clive as short,",
						"          locations as (adress as string, charger as short, city as string, description as string, lat as double, lng as double, name as string, plz as string, status as short, title as string)[],",
						"          timestamp as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source(output(",
						"          data as (address as string, city as string, coordinates as (latitude as double, longitude as double), evses as (connectors as (format as string, last_updated as string, max_amperage as short, max_electric_power as integer, max_voltage as short, standard as string)[], evse_id as string, last_updated as string, status as string)[], id as string, last_updated as string, mobie_voltage_level as string, party_id as string)[],",
						"          status_code as short,",
						"          status_message as string,",
						"          timestamp as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     documentForm: 'documentPerLine') ~> source3",
						"source1 foldDown(unroll(locations),",
						"     mapColumn(",
						"          status = locations.status,",
						"          lat = locations.lat,",
						"          lng = locations.lng,",
						"          title = locations.name,",
						"          timestamp",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"select1, select3 union(byName: true)~> union1",
						"source3 foldDown(unroll(data),",
						"     mapColumn(",
						"          lat = data.coordinates.latitude,",
						"          lng = data.coordinates.longitude,",
						"          evses = data.evses",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"derivedColumn2 select(mapColumn(",
						"          lat,",
						"          lng,",
						"          title,",
						"          status,",
						"          date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select3",
						"flatten1 derive(date = toUTC(toTimestamp('1970-01-01 00:00:00\",\"yyyy-MM-dd HH:mm:ss') + seconds(timestamp)),",
						"          lat = toString(lat),",
						"          lng = toString(lng)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          status,",
						"          lat,",
						"          lng,",
						"          title,",
						"          date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flatten3 foldDown(unroll(evses),",
						"     mapColumn(",
						"          lat,",
						"          lng,",
						"          title = evses.evse_id,",
						"          status = evses.status,",
						"          date = evses.last_updated",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(status = iif(status==\"AVAILABLE\",1,0),",
						"          date = toUTC(toTimestamp(dropRight(replace(replace(date,\"T\",\" \"),\"Z\",\"\"),4), \"yyyy-MM-dd HH:mm:ss\")),",
						"          lat = toString(lat),",
						"          lng = toString(lng)) ~> derivedColumn2",
						"union1 derive(weekday = dayOfWeek(date),",
						"          hour = hour(date)) ~> derivedColumn3",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          status as string,",
						"          lat as string,",
						"          lng as string,",
						"          title as string,",
						"          date as string,",
						"          weekday as string,",
						"          hour as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ionitydatalake')]",
				"[concat(variables('factoryId'), '/datasets/pgmdatalake')]",
				"[concat(variables('factoryId'), '/datasets/finalCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "READfinalCSV",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> READfinalCSV",
							"dataset": {
								"referenceName": "READfinalCSV",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared READfinalCSV = let AdfDoc = AzureStorage.DataLakeContents(\"https://adatastorage.dfs.core.windows.net/finalcsv/part-00002-a1645f3b-8a66-48a8-865f-fd092b68380f-c000.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"READfinalCSV\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/READfinalCSV')]"
			]
		}
	]
}