{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ionitydatalake",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "pgmdatalake",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "finalCSV",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "union1"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "flatten4"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cbuilding as short,",
				"          changed as boolean,",
				"          clive as short,",
				"          locations as (adress as string, charger as short, city as string, description as string, lat as double, lng as double, name as string, plz as string, status as short, title as string)[],",
				"          timestamp as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     purgeFiles: true,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source(output(",
				"          data as (address as string, city as string, coordinates as (latitude as double, longitude as double), evses as (connectors as (format as string, last_updated as string, max_amperage as short, max_electric_power as integer, max_voltage as short, standard as string)[], evse_id as string, last_updated as string, status as string)[], id as string, last_updated as string, mobie_voltage_level as string, party_id as string)[],",
				"          status_code as short,",
				"          status_message as string,",
				"          timestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     purgeFiles: true,",
				"     documentForm: 'documentPerLine') ~> source3",
				"source1 foldDown(unroll(locations),",
				"     mapColumn(",
				"          status = locations.status,",
				"          lat = locations.lat,",
				"          lng = locations.lng,",
				"          title = locations.name,",
				"          timestamp",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"select1, select3 union(byName: true)~> union1",
				"source3 foldDown(unroll(data),",
				"     mapColumn(",
				"          lat = data.coordinates.latitude,",
				"          lng = data.coordinates.longitude,",
				"          evses = data.evses",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"derivedColumn2 select(mapColumn(",
				"          lat,",
				"          lng,",
				"          title,",
				"          status,",
				"          date",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select3",
				"flatten1 derive(date = toUTC(toTimestamp('1970-01-01 00:00:00\",\"yyyy-MM-dd HH:mm:ss') + seconds(timestamp)),",
				"          lat = toString(lat),",
				"          lng = toString(lng)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          status,",
				"          lat,",
				"          lng,",
				"          title,",
				"          date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"flatten3 foldDown(unroll(evses),",
				"     mapColumn(",
				"          lat,",
				"          lng,",
				"          title = evses.evse_id,",
				"          status = evses.status,",
				"          date = evses.last_updated",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten4",
				"flatten4 derive(status = iif(status==\"AVAILABLE\",1,0),",
				"          date = toUTC(toTimestamp(dropRight(replace(replace(date,\"T\",\" \"),\"Z\",\"\"),4), \"yyyy-MM-dd HH:mm:ss\")),",
				"          lat = toString(lat),",
				"          lng = toString(lng)) ~> derivedColumn2",
				"union1 derive(weekday = dayOfWeek(date),",
				"          hour = hour(date)) ~> derivedColumn3",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          status as string,",
				"          lat as string,",
				"          lng as string,",
				"          title as string,",
				"          date as string,",
				"          weekday as string,",
				"          hour as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}